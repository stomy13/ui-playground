/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const React19LazyImport = createFileRoute('/react19')()
const ProxyLazyImport = createFileRoute('/proxy')()
const PlaygroundLazyImport = createFileRoute('/playground')()
const HeartlaundryLazyImport = createFileRoute('/heartlaundry')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const React19LazyRoute = React19LazyImport.update({
  id: '/react19',
  path: '/react19',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/react19.lazy').then(d => d.Route))

const ProxyLazyRoute = ProxyLazyImport.update({
  id: '/proxy',
  path: '/proxy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/proxy.lazy').then(d => d.Route))

const PlaygroundLazyRoute = PlaygroundLazyImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/playground.lazy').then(d => d.Route))

const HeartlaundryLazyRoute = HeartlaundryLazyImport.update({
  id: '/heartlaundry',
  path: '/heartlaundry',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/heartlaundry.lazy').then(d => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then(d => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then(d => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/heartlaundry': {
      id: '/heartlaundry'
      path: '/heartlaundry'
      fullPath: '/heartlaundry'
      preLoaderRoute: typeof HeartlaundryLazyImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundLazyImport
      parentRoute: typeof rootRoute
    }
    '/proxy': {
      id: '/proxy'
      path: '/proxy'
      fullPath: '/proxy'
      preLoaderRoute: typeof ProxyLazyImport
      parentRoute: typeof rootRoute
    }
    '/react19': {
      id: '/react19'
      path: '/react19'
      fullPath: '/react19'
      preLoaderRoute: typeof React19LazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/heartlaundry': typeof HeartlaundryLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/proxy': typeof ProxyLazyRoute
  '/react19': typeof React19LazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/heartlaundry': typeof HeartlaundryLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/proxy': typeof ProxyLazyRoute
  '/react19': typeof React19LazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/heartlaundry': typeof HeartlaundryLazyRoute
  '/playground': typeof PlaygroundLazyRoute
  '/proxy': typeof ProxyLazyRoute
  '/react19': typeof React19LazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/heartlaundry'
    | '/playground'
    | '/proxy'
    | '/react19'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/heartlaundry' | '/playground' | '/proxy' | '/react19'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/heartlaundry'
    | '/playground'
    | '/proxy'
    | '/react19'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  HeartlaundryLazyRoute: typeof HeartlaundryLazyRoute
  PlaygroundLazyRoute: typeof PlaygroundLazyRoute
  ProxyLazyRoute: typeof ProxyLazyRoute
  React19LazyRoute: typeof React19LazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  HeartlaundryLazyRoute: HeartlaundryLazyRoute,
  PlaygroundLazyRoute: PlaygroundLazyRoute,
  ProxyLazyRoute: ProxyLazyRoute,
  React19LazyRoute: React19LazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/heartlaundry",
        "/playground",
        "/proxy",
        "/react19"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/heartlaundry": {
      "filePath": "heartlaundry.lazy.tsx"
    },
    "/playground": {
      "filePath": "playground.lazy.tsx"
    },
    "/proxy": {
      "filePath": "proxy.lazy.tsx"
    },
    "/react19": {
      "filePath": "react19.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
